# {{ image.pretty_name }} container image

{% include 'badges.j2' %}

## Description

[Go](https://go.dev/) (a.k.a., Golang) is a statically-typed programming
language, with syntax loosely derived from C. Go offers additional features
such as garbage collection, type safety, certain dynamic-typing capabilities,
additional built-in types (for example, variable-length arrays and key-value
maps) as well as a large standard library.

{%- if image.version.endswith('-openssl') %}

## FIPS 140-3

The image includes a FIPS 140-2/140-3 enabled Go wrapper that prefers using OpenSSL
for cryptographic operations, if available at runtime.
This allows the use of FIPS 140-2/140-3 validated routines, provided by the OpenSSL
library, for cryptographic operations in the container environment.

{%- endif %}


## Usage

To compile and deploy an application, copy the sources, fetch dependencies
(assuming go.mod is used for dependency management), and build the binary:

```Dockerfile
# Build the application using the {{ image.pretty_name }} container image
FROM {{ image.pretty_reference }} as build

WORKDIR /app

# pre-copy/cache go.mod for pre-downloading dependencies and only
# redownloading them in subsequent builds if they change
COPY go.mod go.sum ./
RUN go mod download && go mod verify

COPY . ./

# Make sure to build the application with CGO disabled.
# This will force Go to use some Go implementations of code
# rather than those normally supplied by the host operating system.
# You need this for scratch images as those supporting libraries
# are not available.
RUN CGO_ENABLED=0 go build -o /hello

# Bundle the application into a scratch image
FROM scratch

COPY --from=build /hello /hello

CMD ["/hello"]
```

Build and run the container image:

```ShellSession
$ podman build -t my-golang-app .
$ podman run -it --rm my-golang-app
```

There are situations when you don't want to run an application inside a container.

To compile the application, without running it inside a container instance, use the following command:

```ShellSession
$ podman run --rm -v "$PWD":/app:Z -w /app {{ image.pretty_reference }} go build -v
```

To run the application tests inside a container, use the following command:

```ShellSession
$ podman run --rm -v "$PWD":/app:Z -w /app {{ image.pretty_reference }} go test -v
```

**Note:** The Go image should be used as a build environment. That means
the compiler does not need to be shipped as part of the images that are
distributed. Instead, it is recommended that the Go image is used as the
builder image only.

There are two ways to work with Go images. First, you can encapsulate your
application in a `scratch` container image, which is essentially an empty
image. This approach will not function if your Go application depends on libc
or any other library, as they will not be available.

A second method is to use a slim base container image with just the minimal
packages needed.
The [SLE BCI General Purpose Base Containers](https://opensource.suse.com/bci-docs/documentation/general-purpose-bci/)
images offer four different options here, depending on your exact requirements.

See the [SLE BCI use with Go documentation](https://opensource.suse.com/bci-docs/guides/use-with-golang/)
for further details.

{%- if image.version.endswith('-openssl') %}

## FIPS 140-3

To restrict all TLS configuration to FIPS-approved settings, add
the following line:

```go
import _ "crypto/tls/fipsonly"
```

{%- endif %}


## Additional tools

The following tools are also included in the image:

- go{{ image.version }}-race
- make
- git-core

{% include 'licensing_and_eula.j2' %}
